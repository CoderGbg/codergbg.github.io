[{"content":"集成参考了 Google 的 docsy 中的集成方式。\n主题 hugo-theme-stack 中没有集成 Mermaid，仅集成了 Katex，需要画图的时候就要自己引入 Mermaid 。\n由于使用 module 的方式使用主题，故并不想因为为了引入 Mermaid 而修改主题模板。Stack 提供了两个空的模板来支持自定义，所以就通过这两个自定义模板来引入。\nlayouts/partials/head/custom.html layouts/partials/footer/custom.html 另外，为了方便后续维护，也同时使用 docsy 里的方式引入了 Katex。\n集成方式 主要的工作是添加钩子模板和引入相关的JavaScript文件。\n新增文件 将本项目 中的以下文件，直接拷贝到你的项目中。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # 钩子模板 layouts/_default/_markup/render-codeblock-chem.html layouts/_default/_markup/render-codeblock-markmap.html layouts/_default/_markup/render-codeblock-math.html layouts/_default/_markup/render-codeblock-mermaid.html # 主题可自定义的模板文件 layouts/partials/head/custom.html layouts/partials/footer/custom.html # JavaScript文件集中引入 layouts/partials/scripts.html # JavaScript文件和CSS文件 assets/js/markmap.js assets/js/mermaid.js static/js/prism.js static/css/prism.css 新增相关配置 config_default\\params.yaml\n1 2 3 4 5 6 7 8 9 10 11 markmap: enable: true mermaid: enable: true theme: default flowchart: diagramPadding: 20 katex: enable: true mhchem: enable: true PS: 如果不是使用的Configuration Directory，要把配置加到params下。\n使用示例 Mermaid graph TD; A--\u0026gt;B; A--\u0026gt;C; B--\u0026gt;D; C--\u0026gt;D; MarkMap # markmap ## Links - \u0026lt;https://markmap.js.org/\u0026gt; - [GitHub](https://github.com/gera2ld/markmap) ## Related - [coc-markmap](https://github.com/gera2ld/coc-markmap) - [gatsby-remark-markmap](https://github.com/gera2ld/gatsby-remark-markmap) ## Features - links - **inline** ~~text~~ *styles* - multiline text - `inline code` - ```js console.log(\u0026#39;code block\u0026#39;); ``` - Katex - $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$ Mathjax 行间公式：$$\\sum_{i=0}N\\int_{a}{b}g(t,i)\\text{d}t$$\n行内公式：\\(y=ax+b\\)\nmath 代码块：\n$$\\tag*{(1)} P(E) = {n \\choose k} p^k (1-p)^{n-k}$$mhchem $$\\tag*{(2)} \\ce{Zn^2+ \u003c=\u003e[+ 2OH-][+ 2H+] $\\underset{\\text{amphoteric hydroxide}}{\\ce{Zn(OH)2 v}}$ \u003c=\u003e[+ 2OH-][+ 2H+] $\\underset{\\text{tetrahydroxozincate}}{\\ce{[Zn(OH)4]^2-}}$}$$","date":"2023-04-19T21:59:22Z","image":"https://codergbg.github.io/p/2023/04/hugo-diagrams/cover_hu8416185241577319258.jpg","permalink":"https://codergbg.github.io/p/2023/04/hugo-diagrams/","title":"在 Hugo Stack 中集成 Mermaid 和 MarkMap"},{"content":"前言 当前 V2Ray 应该算是比较好用的翻墙软件，和 ss、ssr 相比还是很稳定的，不容易被检测，尤其是加上 Nginx 和 TLS，再做个简单的网站顶在前面，完全伪造成了一个正常的网页访问行为，非常安全可靠，并且具有很强的抗检测能力。\n必须会简单使用 Linux 命令行，即 Shell 以下示例中的域名均为www.example.cc，域名、UUID 以及 MTProto 的密钥请记得替换成自己的 有耐心、喜欢折腾或者想自己学点东西的就往下看 没耐心的可以去用机场或者一键脚本 这是针对学生和工薪阶层且有科学上网需求的同志，土豪请直接用机场去吧（比如外号 richCloud 的 rixCloud ） 参考文档 V2Ray 官方文档 V2Ray 白话文教程 MTProxy 官方文档 涉及的内容 graph LR subgraph V2Ray v2rayws[V2Ray WebSocket] v2raytg[V2Ray MTProto] end free((WAN)) rep(外部请求) --\u0026gt; in[Nginx] in -- / --\u0026gt; web[腾讯公益404] in -- /wss --\u0026gt; v2rayws v2rayws --\u0026gt; free tgc(Telegram Client) --\u0026gt; v2raytg v2raytg --\u0026gt; free 域名申请； Let\u0026rsquo;s Encrypt 申请 SSL 证书； Nginx 作为前置服务配置 web 主页； 通过配置 Nginx 反向代理访问后面的 v2ray 服务； v2ray 同时提供 mtproto 服务； 使用腾讯公益 404 作为 web 主页； 大致的步骤 准备服务器； 申请域名； 创建网站根目录； 安装 Nginx； 获得 SSL 证书； 修改 Nginx 配置支持 Https； 安装启动 V2Ray； 安装部署 端口规划 Port Listen IP Use 80 0.0.0.0 Nginx Http 443 0.0.0.0 Nginx Https 10443 127.0.0.1 V2Ray WebSocket 8080 0.0.0.0 V2Ray MTProto 服务器准备 拿来翻墙用的服务器，肯定是本着便宜好用性价比高的原则来选择。搬瓦工 毕竟有 cn2 和 cn2 gia 线路，价格也算是最便宜的，重点可以支付宝支付，还是选择搬瓦工吧。\n逢年过节，搬瓦工都会推出特别款优惠主机，比如双十一、黑五，性价比极高！可以关注下。\nBandwagonHost 套餐选择 搬瓦工套餐很多，相同配置不同价格排序如下： 普通线路 \u0026lt; CN2线路 \u0026lt; CN2 GIA线路 一般情况下个人使用或者家用的话，最便宜的套餐足以，不常看视频，一个月流量在 100-200GB。\n注册购买什么的就不赘述了，现在上过学都看得懂英文。\n根据自己的需求选择相应的配置即可，避免浪费。\n访问谷歌，简单的网页访问需求 1 2 3 4 5 6 10G VZ - PROMO SSD: 10 GB RAID-10 RAM: 512 MB CPU: 1x Intel Xeon Transfer: 500 GB/mo Link speed: 1 Gigabit 19.99 美刀一年，只能年付。 OpenVZ 架构，唯一的优势就是便宜。高峰期对主机性能和网络都有影响。\n偶尔看看视频，比如油管 1 2 3 4 5 6 SPECIAL 10G KVM PROMO V3 - LOS ANGELES - CN2 SSD: 10 GB RAID-10 RAM: 512 MB CPU: 1x Intel Xeon Transfer: 500 GB/mo Link speed: 1 Gigabit 29.99 美刀一年，只能年付。一般人建议买这个。 KVM 架构，延迟勉强，170ms左右，油管 4K 撑得住。高峰期对网络有一定影响。\n强烈视频需求，打游戏，需要低延迟网络 1 2 3 4 5 6 7 SPECIAL 10G KVM PROMO V3 - LOS ANGELES - CN2 GIA - LIMITED EDITION **Limited stock available** SSD: 10 GB RAID-10 RAM: 512 MB CPU: 1x Intel Xeon Transfer: 300 GB/mo Link speed: 1 Gigabit 39.99 美刀一年，只能年付。此套餐经常缺货，想买的需要关注，有钱可以买上一级套餐（可季付、半年付、年付）。\n同样 KVM 架构，延迟比 cn2 略低，油管 4K 撑得住。高峰期对网络影响较小。\n准备软件 1、 MobaXterm : SSH 客户端工具，集成了 SFTP，安装免费版即可 2、 Visual Studio Code : 编辑器，主要拿来编辑 Nginx 的配置文件和 V2ray 的配置文件，支持 JSON 代码高亮，避免配置文件编写错误\n配置服务器 这里以搬瓦工为例。\n更换操作系统 建议选择 CentOS7 吧，方便好用。如果是 KVM 架构的机器，还能选择支持 bbr 的操作 CentOS。这里以 CN2 GIA 的服务器为例。\n以下命令均以 CentOS7 下的命令为例\n登录搬瓦工Client Area，点Services -\u0026gt; My Services查看自己的所有服务 点击对应Product/Service后面的KiwiVM Control Panel按钮进入控制台 首先将虚拟机关机，关机后才能重装系统 选择Install new OS，然后选择\u0026quot;centos-7-x86_64-bbr\u0026quot;，勾选\u0026quot;I agree ...\u0026quot;，点Reload重新安装 记下 root 密码和端口号备用 更改服务器密码 使用 MobaXterm（或者其他 SSH 工具），使用刚刚的密码和端口号登录服务器，注意下端口号，搬瓦工的 SSH 不是默认 22 端口。 登录后执行passwd，然后输入两遍新密码即可\n1 2 3 4 5 $ passwd Changing password for user root. New password: Retype new password: passwd: all authentication tokens updated successfully. 更新系统 搬瓦工自带的 epel 总觉得缺包，所以卸载重新安装下。 同时需要安装下 vim、git、zip 和 unzip。\n1 2 3 4 yum remove -y epel-release yum install -y epel-release yum update -y yum install -y vim git zip unzip 申请域名 由于要使用 TLS，所以需要一个域名。建议注册.cc结尾的域名，便宜并且不需要实名认证。 传送门：https://wanwang.aliyun.com/ 假设我们申请的域名的是：example.cc，编写配置文件时记得替换成自己的。\n配置域名解析 域名解析这里配置两条，把example.cc和www.example.cc都指向服务器的地址。 配置好之后，可以在本地 ping 一下，看看通没通。\n1 ping example.cc 准备 web 根目录 新建目录\n1 mkdir -p /www/root 增加index.html\n1 vim /www/root/index.html 按下i键到插入模式后，将以下所有内容贴进去。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;404\u0026lt;/title\u0026gt; \u0026lt;meta http-equiv=\u0026#34;Content-Type\u0026#34; content=\u0026#34;text/html\u0026#34; charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\u0026#34; charset=\u0026#34;utf-8\u0026#34; homePageUrl=\u0026#34;https://www.example.cc/\u0026#34; homePageName=\u0026#34;回到我的主页\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;/html\u0026gt; 安装配置 Nginx Nginx 安装后，会用到两份配置：\n第一份是给第一次申请 Let\u0026rsquo;s Encrypt 的 SSL 证书用的（由于此时还没有证书，配置成 Https） 第二份是增加了 V2Ray 反代和 Http 重定向 Https 的配置，这个就是一直要用的配置 安装 Nginx 很简单，一行命令搞定。\n1 yum install -y nginx 编辑nginx.conf 文件/etc/nginx/nginx.conf。 害怕出错的或者新手请将文件 SFTP 下载到本地，使用 VSCode 修改后再 SFTP 传回服务器。 熟悉 vim 的就直接在命令行修改吧。\n配置文件如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 user nginx; worker_processes auto; error_log /dev/null; pid /run/nginx.pid; include /usr/share/nginx/modules/*.conf; events { worker_connections 1024; } http { log_format main \u0026#39;$remote_addr - $remote_user [$time_local] \u0026#34;$request\u0026#34; \u0026#39; \u0026#39;$status $body_bytes_sent \u0026#34;$http_referer\u0026#34; \u0026#39; \u0026#39;\u0026#34;$http_user_agent\u0026#34; \u0026#34;$http_x_forwarded_for\u0026#34;\u0026#39;; access_log off; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; include /etc/nginx/conf.d/*.conf; server { listen 80 default_server; listen [::]:80 default_server; server_name example.cc www.example.cc; root /www/root; index index.html index.htm; location / { } } } 启动 Nginx 服务 1 2 systemctl enable nginx systemctl start nginx 然后查看下运行状态是否已经正常启动，看到running即是正常。\n1 2 3 4 $ systemctl status nginx ● nginx.service - The nginx HTTP and reverse proxy server Loaded: loaded (/usr/lib/systemd/system/nginx.service; enabled; vendor preset: disabled) Active: active (running) since Wed 2018-11-14 11:22:53 CST; 4 days ago 然后打开浏览器访问www.example.cc 和example.cc看是否能打开腾讯公益 404 页面。能打开说明 Nginx 已经正确配置，然后就可以开始申请 SSL 证书了。\n安装 V2Ray 具体参考V2Ray 官方文档 ：\n1 bash \u0026lt;(curl -L -s https://install.direct/go.sh) 安装完成后自动启动，这里先把它给停了\n1 systemctl stop v2ray 申请 Let\u0026rsquo;s Encrypt 的 SSL 证书 Let\u0026rsquo;s Encrypt 有很多 ACME 客户端的实现。这里选用acme.sh 。\n安装 acme.sh 安装很简单，一个命令：\n1 curl https://get.acme.sh | sh 安装完成后执行下\n1 source /root/.bashrc 申请证书 很简单，一也是命令：\n1 acme.sh --issue -d example.cc -d www.example.cc --webroot /www/root/ -k ec-256 使用 ec-256 证书，让通信更安全吧。\n将证书安装到目录 这里将证书放到/etx/v2ray目录下。\n1 acme.sh --installcert -d example.cc -d www.example.cc --key-file /etc/v2ray/v2ray.key --fullchain-file /etc/v2ray/v2ray.crt --ecc --reloadcmd \u0026#34;service nginx force-reload \u0026amp;\u0026amp; systemctl restart v2ray\u0026#34; 这行命令除了将证书放到指定目录下外，还会自动创建 crontab 定时任务，后面引号里的命令是定时任务更新证书后执行的命令。\n配置 Nginx 支持 Https 访问 不废话了，直接修改/etc/nginx/nginx.conf，完整配置文件如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 user nginx; worker_processes auto; error_log /dev/null; pid /run/nginx.pid; include /usr/share/nginx/modules/*.conf; events { worker_connections 1024; } http { log_format main \u0026#39;$remote_addr - $remote_user [$time_local] \u0026#34;$request\u0026#34; \u0026#39; \u0026#39;$status $body_bytes_sent \u0026#34;$http_referer\u0026#34; \u0026#39; \u0026#39;\u0026#34;$http_user_agent\u0026#34; \u0026#34;$http_x_forwarded_for\u0026#34;\u0026#39;; access_log off; server_tokens off; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; include /etc/nginx/conf.d/*.conf; # Http Server，强制跳转Https server { listen 80 default_server; listen [::]:80 default_server; server_name example.cc www.example.cc; rewrite ^(.*)$ https://www.example.cc$1 permanent; } # Https Server server { listen 443 ssl http2 default_server; listen [::]:443 ssl http2 default_server; server_name www.example.cc; root /www/root; index index.html index.htm; ssl_certificate \u0026#34;/etc/v2ray/v2ray.crt\u0026#34;; ssl_certificate_key \u0026#34;/etc/v2ray/v2ray.key\u0026#34;; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; include /etc/nginx/default.d/*.conf; location / { } # 反向代理V2Ray location /wss { proxy_redirect off; proxy_pass http://127.0.0.1:10443; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;upgrade\u0026#34;; proxy_set_header Host $http_host; } error_page 404 /404.html; location = /40x.html { } error_page 500 502 503 504 /50x.html; location = /50x.html { } } } 配置完之后重新启动 Nginx\n1 systemctl restart nginx 访问www.example.cc 和example.cc，如果自动跳转https://www.example.cc并且正确显示公益 404 则已经配置正确。\n配置 V2Ray 并启动 前置的所有服务都已经配置完毕，只差最后的 V2Ray 了。\n为 V2Ray 生成一个 UUID 使用 V2Ray 自带的v2ctl工具生成一个新的 uuid。\n1 2 $ /usr/bin/v2ray/v2ctl uuid 27e0efcc-8e13-fef1-9e82-febebc469b2b 记录下此 uuid\n为 mtproto 生成一个密钥 使用 linux 系统创建伪随机数作为密钥。\n1 2 $ head -c 16 /dev/urandom | xxd -ps 80e2e037610bac1444ac02979364f666 记录下此随机数\n修改/etc/v2ray/config.json 同样的，没把握用 vim 修改的，就拷贝下来在 VSCode 里修改，改完再传回服务器。\n将刚生成的 uuid 和随机数填入对应的位置。\n完整配置文件如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 { \u0026#34;log\u0026#34;: { \u0026#34;loglevel\u0026#34;: \u0026#34;none\u0026#34;, \u0026#34;access\u0026#34;: \u0026#34;/var/log/v2ray/access.log\u0026#34;, \u0026#34;error\u0026#34;: \u0026#34;/var/log/v2ray/error.log\u0026#34; }, \u0026#34;inbounds\u0026#34;: [ { \u0026#34;port\u0026#34;: 10443, \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;vmess\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;clients\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;27e0efcc-8e13-fef1-9e82-febebc469b2b\u0026#34;, \u0026#34;alterId\u0026#34;: 64 } ] }, \u0026#34;streamSettings\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;ws\u0026#34;, \u0026#34;wsSettings\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/wss\u0026#34; } } }, { \u0026#34;tag\u0026#34;: \u0026#34;tg-in\u0026#34;, \u0026#34;port\u0026#34;: 8080, \u0026#34;protocol\u0026#34;: \u0026#34;mtproto\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;users\u0026#34;: [ { \u0026#34;secret\u0026#34;: \u0026#34;80e2e037610bac1444ac02979364f666\u0026#34; } ] } } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;protocol\u0026#34;: \u0026#34;freedom\u0026#34;, \u0026#34;settings\u0026#34;: {} }, { \u0026#34;protocol\u0026#34;: \u0026#34;blackhole\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;response\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;none\u0026#34; } }, \u0026#34;tag\u0026#34;: \u0026#34;blocked\u0026#34; }, { \u0026#34;tag\u0026#34;: \u0026#34;tg-out\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;mtproto\u0026#34;, \u0026#34;settings\u0026#34;: {} } ], \u0026#34;routing\u0026#34;: { \u0026#34;domainStrategy\u0026#34;: \u0026#34;IPOnDemand\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;rules\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;ip\u0026#34;: [\u0026#34;geoip:private\u0026#34;], \u0026#34;outboundTag\u0026#34;: \u0026#34;blocked\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;inboundTag\u0026#34;: [\u0026#34;tg-in\u0026#34;], \u0026#34;outboundTag\u0026#34;: \u0026#34;tg-out\u0026#34; } ] } } } #####　启动 V2Ray\n开启开机启动并启动。\n1 2 systemctl enable v2ray systemctl start v2ray 启动之后查看下运行状态，看是否正常运行\n1 2 3 4 5 6 7 $systemctl status v2ray ● v2ray.service - V2Ray Service Loaded: loaded (/etc/systemd/system/v2ray.service; enabled; vendor preset: disabled) Active: active (running) since Sun 2018-11-18 17:00:07 CST; 3h 26min ago Main PID: 8908 (v2ray) CGroup: /system.slice/v2ray.service └─8908 /usr/bin/v2ray/v2ray -config /etc/v2ray/config.json 客户端配置 客户端配置不尽相同，对应客户端详细配置可以自己百度。\n这里用文字描述下大致的配置步骤：\n协议类型选择Vmess，需要和服务端一致 地址填www.example.cc，需要和服务端一致 端口填443，需要和服务端一致 UUID 填27e0efcc-8e13-fef1-9e82-febebc469b2b，需要和服务端一致 传输协议选择ws，路径填写/wss，需要和服务端一致 开启 TLS AlterId 填写64，需要和服务端一致 IOS 客户端 IOS 下的 VPN 类客户端在国区基本下架下完了，V2Ray 推荐使用 Kitsunebi 的 TestFlight 版本。\n在手机上安装 TestFlight App：https://itunes.apple.com/us/app/testflight/id899247664?mt=8 在手机上打开这个链接自动加入 TestFlight：https://testflight.apple.com/join/2w6EF67u \u0026ndash;\u0026gt;原文地址 其它 其它客户端请参考： Windows Android Mac OS X 最后提供两份客户端配置文件 无需求的以下就可以不看了。\nPC 用的支持国内外分流 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 { \u0026#34;inbounds\u0026#34;: [ { \u0026#34;port\u0026#34;: 1087, \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;http\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;allowTransparent\u0026#34;: true } }, { \u0026#34;port\u0026#34;: 1086, \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;socks\u0026#34;, \u0026#34;domainOverride\u0026#34;: [\u0026#34;tls\u0026#34;, \u0026#34;http\u0026#34;], \u0026#34;settings\u0026#34;: { \u0026#34;auth\u0026#34;: \u0026#34;noauth\u0026#34;, \u0026#34;udp\u0026#34;: true } } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;protocol\u0026#34;: \u0026#34;vmess\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;vnext\u0026#34;: [ { \u0026#34;address\u0026#34;: \u0026#34;www.example.cc\u0026#34;, \u0026#34;port\u0026#34;: 443, \u0026#34;users\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;27e0efcc-8e13-fef1-9e82-febebc469b2b\u0026#34;, \u0026#34;alterId\u0026#34;: 64, \u0026#34;security\u0026#34;: \u0026#34;auto\u0026#34; } ] } ] }, \u0026#34;streamSettings\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;ws\u0026#34;, \u0026#34;wsSettings\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/wss\u0026#34; }, \u0026#34;security\u0026#34;: \u0026#34;tls\u0026#34; }, \u0026#34;mux\u0026#34;: { \u0026#34;enabled\u0026#34;: false, \u0026#34;concurrency\u0026#34;: 8 }, \u0026#34;tag\u0026#34;: \u0026#34;proxy\u0026#34; }, { \u0026#34;protocol\u0026#34;: \u0026#34;freedom\u0026#34;, \u0026#34;settings\u0026#34;: {}, \u0026#34;tag\u0026#34;: \u0026#34;direct\u0026#34; }, { \u0026#34;protocol\u0026#34;: \u0026#34;blackhole\u0026#34;, \u0026#34;settings\u0026#34;: {}, \u0026#34;tag\u0026#34;: \u0026#34;block\u0026#34; } ], \u0026#34;log\u0026#34;: { \u0026#34;loglevel\u0026#34;: \u0026#34;none\u0026#34;, \u0026#34;access\u0026#34;: \u0026#34;D:/v2ray_access.log\u0026#34;, \u0026#34;error\u0026#34;: \u0026#34;D:/v2ray_error.log\u0026#34; }, \u0026#34;dns\u0026#34;: { \u0026#34;hosts\u0026#34;: { \u0026#34;example.com\u0026#34;: \u0026#34;127.0.0.1\u0026#34; }, \u0026#34;servers\u0026#34;: [\u0026#34;223.5.5.5\u0026#34;, \u0026#34;8.8.8.8\u0026#34;, \u0026#34;localhost\u0026#34;] }, \u0026#34;routing\u0026#34;: { \u0026#34;strategy\u0026#34;: \u0026#34;rules\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;domainStrategy\u0026#34;: \u0026#34;IPIfNonMatch\u0026#34;, \u0026#34;rules\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;domain\u0026#34;: [ \u0026#34;dropbox\u0026#34;, \u0026#34;github\u0026#34;, \u0026#34;google\u0026#34;, \u0026#34;instagram\u0026#34;, \u0026#34;netflix\u0026#34;, \u0026#34;pinterest\u0026#34;, \u0026#34;pixiv\u0026#34;, \u0026#34;tumblr\u0026#34;, \u0026#34;twitter\u0026#34;, \u0026#34;domain:facebook.com\u0026#34;, \u0026#34;domain:fbcdn.net\u0026#34;, \u0026#34;domain:fivecdm.com\u0026#34;, \u0026#34;domain:ggpht.com\u0026#34;, \u0026#34;domain:gstatic.com\u0026#34;, \u0026#34;domain:line-scdn.net\u0026#34;, \u0026#34;domain:line.me\u0026#34;, \u0026#34;domain:medium.com\u0026#34;, \u0026#34;domain:naver.jp\u0026#34;, \u0026#34;domain:pximg.net\u0026#34;, \u0026#34;domain:t.co\u0026#34;, \u0026#34;domain:twimg.com\u0026#34;, \u0026#34;domain:youtube.com\u0026#34;, \u0026#34;domain:ytimg.com\u0026#34; ], \u0026#34;outboundTag\u0026#34;: \u0026#34;proxy\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;ip\u0026#34;: [ \u0026#34;125.209.222.0/24\u0026#34;, \u0026#34;149.154.167.0/24\u0026#34;, \u0026#34;149.154.175.0/24\u0026#34;, \u0026#34;91.108.56.0/24\u0026#34; ], \u0026#34;outboundTag\u0026#34;: \u0026#34;proxy\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;domain\u0026#34;: [ \u0026#34;cctv\u0026#34;, \u0026#34;geosite:cn\u0026#34;, \u0026#34;umeng\u0026#34;, \u0026#34;domain:apple.com\u0026#34;, \u0026#34;domain:crashlytics.com\u0026#34;, \u0026#34;domain:icloud.com\u0026#34;, \u0026#34;domain:ixigua.com\u0026#34;, \u0026#34;domain:pstatp.com\u0026#34;, \u0026#34;domain:snssdk.com\u0026#34;, \u0026#34;domain:toutiao.com\u0026#34; ], \u0026#34;outboundTag\u0026#34;: \u0026#34;direct\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;ip\u0026#34;: [\u0026#34;geoip:cn\u0026#34;, \u0026#34;geoip:private\u0026#34;], \u0026#34;outboundTag\u0026#34;: \u0026#34;direct\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;domain\u0026#34;: [\u0026#34;domain:doubleclick.net\u0026#34;], \u0026#34;outboundTag\u0026#34;: \u0026#34;block\u0026#34; } ] } } } 路由器用的，透明代理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 { \u0026#34;inbounds\u0026#34;: [ { \u0026#34;port\u0026#34;: 7070, \u0026#34;protocol\u0026#34;: \u0026#34;dokodemo-door\u0026#34;, \u0026#34;domainOverride\u0026#34;: [\u0026#34;tls\u0026#34;, \u0026#34;http\u0026#34;], \u0026#34;address\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;tcp,udp\u0026#34;, \u0026#34;timeout\u0026#34;: 30, \u0026#34;followRedirect\u0026#34;: true } } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;protocol\u0026#34;: \u0026#34;vmess\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;vnext\u0026#34;: [ { \u0026#34;address\u0026#34;: \u0026#34;www.example.cc\u0026#34;, \u0026#34;port\u0026#34;: 443, \u0026#34;users\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;27e0efcc-8e13-fef1-9e82-febebc469b2b\u0026#34;, \u0026#34;alterId\u0026#34;: 64, \u0026#34;security\u0026#34;: \u0026#34;auto\u0026#34; } ] } ] }, \u0026#34;streamSettings\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;ws\u0026#34;, \u0026#34;wsSettings\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/wss\u0026#34; }, \u0026#34;security\u0026#34;: \u0026#34;tls\u0026#34; }, \u0026#34;mux\u0026#34;: { \u0026#34;enabled\u0026#34;: false } } ], \u0026#34;log\u0026#34;: { \u0026#34;loglevel\u0026#34;: \u0026#34;none\u0026#34;, \u0026#34;access\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;error\u0026#34;: \u0026#34;\u0026#34; }, \u0026#34;dns\u0026#34;: { \u0026#34;servers\u0026#34;: [\u0026#34;localhost\u0026#34;] } } ","date":"2018-11-18T13:32:58+08:00","image":"https://codergbg.github.io/p/2018/11/v2ray-tutorial/cover_hu10758591465396705594.png","permalink":"https://codergbg.github.io/p/2018/11/v2ray-tutorial/","title":"V2Ray4.x + Nginx + TLS + ws + MTProto 详细配置教程"}]